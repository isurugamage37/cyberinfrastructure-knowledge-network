{
  "name": "Neo4jSinkConnectorCameraTraps",
  "config": {
    "topics": "oracle-events",
    "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
    "errors.retry.timeout": "-1",
    "errors.retry.delay.max.ms": "1000",
    "errors.tolerance": "all",
    "errors.log.enable": true,
    "errors.log.include.messages": true,
    "key.converter": "org.apache.kafka.connect.storage.StringConverter",
    "key.converter.schemas.enable": false,
    "value.converter": "org.apache.kafka.connect.json.JsonConverter",
    "value.converter.schemas.enable": false,
    "neo4j.server.uri": "bolt://neo4j:7687",
    "neo4j.authentication.basic.username": "neo4j",
    "neo4j.authentication.basic.password": "PWD_HERE",
    "neo4j.topic.cypher.oracle-events": "
      MERGE (device:EdgeDevice {device_id: event.device_id})
      MERGE (ex:Experiment {experiment_id: event.experiment_id}) ON CREATE SET ex.start_time = timestamp()
      MERGE (depl:Deployment {deployment_id: event.experiment_id}) ON CREATE SET depl.start_time = timestamp()
      MERGE (user:User {user_id: event.user_id})
      MERGE (user)<-[exr:SUBMITTED_BY]-(ex) ON CREATE SET exr.submitted_time = timestamp()
      MERGE (device)<-[dex:EXECUTED_ON]-(ex) ON CREATE SET dex.submitted_time = timestamp()
      MERGE (device)<-[ddepl:DEPLOYED_IN]-(depl)
      MERGE (model:Model {model_id: event.model_id})
      MERGE (model)<-[mdex:USED]-(ex) ON CREATE SET mdex.start_time = timestamp()
      MERGE (model)-[hd:HAS_DEPLOYMENT]->(depl)
      MERGE (ri:RawImage {UUID: event.UUID})
      ON CREATE SET
        ri.image_name = event.image_name,
        ri.ground_truth = event.ground_truth
      MERGE (ex)<-[r:PROCESSED_BY]-(ri)
      SET r = {
        image_count: event.image_count,
        image_receiving_timestamp: datetime(event.image_receiving_timestamp),
        image_scoring_timestamp: datetime(event.image_scoring_timestamp),
        model_id: event.model_id,
        scores: event.flattened_scores,
        image_store_delete_time: datetime(event.image_store_delete_time),
        image_decision: event.image_decision,
        ingestion_timestamp: datetime()
      }
    "
  }
}